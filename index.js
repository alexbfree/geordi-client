// Generated by CoffeeScript 1.10.0
(function() {
  var GeordiClient, ZooUserStringGetter,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ZooUserStringGetter = require('zooniverse-user-string-getter');

  module.exports = GeordiClient = (function() {
    GeordiClient.prototype.GEORDI_STAGING_SERVER_URL = 'http://geordi.staging.zooniverse.org/api/events/';

    GeordiClient.prototype.GEORDI_PRODUCTION_SERVER_URL = 'http://geordi.zooniverse.org/api/events/';

    GeordiClient.prototype.gettingCohort = false;

    GeordiClient.prototype.defaultSubjectGetter = function() {
      return "(N/A)";
    };

    GeordiClient.prototype.defaultSubjectGetterParameter = function() {
      return "(N/A)";
    };

    GeordiClient.prototype.defaultLastKnownCohortGetter = function() {
      return null;
    };

    GeordiClient.prototype.defaultZooUserIDGetter = function() {
      return null;
    };

    GeordiClient.prototype.defaultProjectToken = "unspecified";

    GeordiClient.prototype.getCurrentSubject = GeordiClient.defaultSubjectGetter;

    GeordiClient.prototype.getCurrentUserID = GeordiClient.defaultZooUserIDGetter;

    function GeordiClient(config) {
      this.logEvent = bind(this.logEvent, this);
      this.buildEventData = bind(this.buildEventData, this);
      this.addCohortToEventData = bind(this.addCohortToEventData, this);
      this.addUserDetailsToEventData = bind(this.addUserDetailsToEventData, this);
      this.logToGeordi = bind(this.logToGeordi, this);
      if (!"server" in config) {
        config["server"] = "staging";
      }
      if ((!"projectToken" in config) || (!config["projectToken"] instanceof String) || (!config["projectToken"].length > 0)) {
        config["projectToken"] = this.defaultProjectToken;
      }
      if ((!"zooUserIDGetter" in config) || (!config["zooUserIDGetter"] instanceof Function)) {
        config["zooUserIDGetter"] = this.defaultZooUserIDGetter;
      }
      if ((!"subjectGetter" in config) || (!config["subjectGetter"] instanceof Function)) {
        config["subjectGetter"] = this.defaultSubjectGetter;
      }
      if (!"subjectGetterParameter" in config) {
        config["subjectGetterParameter"] = this.defaultSubjectGetterParameter;
      }
      if (config["server"] === "production") {
        this.GEORDI_SERVER_URL = this.GEORDI_PRODUCTION_SERVER_URL;
      } else {
        this.GEORDI_SERVER_URL = this.GEORDI_STAGING_SERVER_URL;
      }
      if ("experimentServerClient" in config) {
        this.experimentServerClient = config["experimentServerClient"];
      }
      this.getCurrentSubject = config["subjectGetter"];
      this.getCurrentSubjectParameter = config["subjectGetterParameter"];
      this.getCurrentUserID = config["zooUserIDGetter"];
      this.getCurrentUserIDParameter = config["zooUserIDGetterParameter"];
      this.projectToken = config["projectToken"];
      this.UserStringGetter = new ZooUserStringGetter(this.getCurrentUserID, this.getCurrentUserIDParameter);
    }


    /*
    log event with Google Analytics
     */

    GeordiClient.prototype.logToGoogle = function(eventData) {
      return dataLayer.push({
        event: "gaTriggerEvent",
        project_token: eventData['projectToken'],
        user_id: eventData['userID'],
        subject_id: eventData['subjectID'],
        geordi_event_type: eventData['type'],
        classification_id: eventData['relatedID']
      });
    };


    /*
    log event with Geordi v2.1
     */

    GeordiClient.prototype.logToGeordi = function(eventData) {
      return $.ajax({
        url: this.GEORDI_SERVER_URL,
        type: 'POST',
        contentType: 'application/json; charset=utf-8',
        data: JSON.stringify(eventData),
        dataType: 'json'
      });
    };


    /*
    add the user's details to the event data
     */

    GeordiClient.prototype.addUserDetailsToEventData = function(eventData) {
      var eventualEventData;
      eventualEventData = new $.Deferred;
      if ((!this.UserStringGetter.currentUserID) || this.UserStringGetter.currentUserID === this.UserStringGetter.ANONYMOUS) {
        this.UserStringGetter.getUserID().then((function(_this) {
          return function(data) {
            if (data != null) {
              if (data !== _this.UserStringGetter.currentUserID) {
                return _this.UserStringGetter.currentUserID = data;
              }
            }
          };
        })(this)).always((function(_this) {
          return function() {
            eventData['userID'] = _this.UserStringGetter.currentUserID;
            return eventualEventData.resolve(eventData);
          };
        })(this));
      } else {
        eventData['userID'] = this.UserStringGetter.currentUserID;
        eventualEventData.resolve(eventData);
      }
      return eventualEventData.promise();
    };

    GeordiClient.prototype.addCohortToEventData = function(eventData) {
      var eventualEventData;
      eventualEventData = new $.Deferred;
      this.experimentServerClient.getCohort().then((function(_this) {
        return function(cohort) {
          if (cohort != null) {
            eventData['cohort'] = cohort;
            return _this.experimentServerClient.currentCohort = cohort;
          }
        };
      })(this)).always(function() {
        return eventualEventData.resolve(eventData);
      });
      return eventualEventData.promise();
    };

    GeordiClient.prototype.buildEventData = function(eventData) {
      if (eventData == null) {
        eventData = {};
      }
      eventData['browserTime'] = Date.now();
      eventData['projectToken'] = this.projectToken;
      eventData['errorCode'] = "";
      eventData['errorDescription'] = "";
      if (this.experimentServerClient != null) {
        eventData['experiment'] = this.experimentServerClient.ACTIVE_EXPERIMENT;
        if (this.experimentServerClient.currentCohort != null) {
          eventData['cohort'] = this.experimentServerClient.currentCohort;
        }
      }
      if (this.UserStringGetter.currentUserID != null) {
        eventData['userID'] = this.UserStringGetter.currentUserID;
      } else {
        eventData['userID'] = this.UserStringGetter.ANONYMOUS;
      }
      return eventData;
    };

    GeordiClient.prototype.updateEventDataFromParameterObject = function(parameterObject, eventData) {
      var field, i, k, len, newData, ref, v;
      if (eventData == null) {
        eventData = {};
      }
      ref = ["userID", "subjectID", "relatedID", "errorCode", "errorDescription", "projectToken", "serverURL", "experiment", "cohort", "type", "userSeq", "sessionNumber", "eventNumber", "userAgent", "clientIP"];
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        if (field in parameterObject && typeof parameterObject[field] === "string" && parameterObject[field].length > 0) {
          eventData[field] = parameterObject[field];
        }
      }
      if ("data" in parameterObject) {
        if (typeof parameterObject["data"] === "string") {
          newData = JSON.parse(parameterObject["data"]);
        } else {
          newData = parameterObject["data"];
        }
        if (eventData["data"] != null) {
          if (typeof eventData["data"] === "string") {
            eventData["data"] = JSON.parse(eventData["data"]);
          }
          for (k in newData) {
            v = newData[k];
            eventData["data"][k] = v;
          }
        } else {
          eventData["data"] = newData;
        }
        eventData["data"] === JSON.stringify(eventData["data"]);
      }
      if ("browserTime" in parameterObject && typeof parameterObject["browserTime"] === "number" && parameterObject["browserTime"] > 1441062000000) {
        eventData["browserTime"] = parameterObject["browserTime"];
      }
      return eventData;
    };


    /*
    This will log a user interaction both in the Geordi
    analytics API and in Google Analytics.
     */

    GeordiClient.prototype.logEvent = function(parameter) {
      var eventData;
      eventData = this.buildEventData();
      if (typeof parameter === "string") {
        eventData["type"] = parameter;
      } else if (typeof parameter === "object") {
        if (!("type" in parameter && typeof parameter.type === "string" && parameter.type.length > 0)) {
          eventData["errorCode"] = "GCP01";
          eventData["errorDescription"] = "missing 'type' when calling logEvent in Geordi client";
          eventData["type"] = "error";
        } else {
          eventData = this.updateEventDataFromParameterObject(parameter, eventData);
        }
        if (!("subjectID" in eventData && typeof parameter.subjectID === "string" && parameter.subjectID.length > 0)) {
          eventData["subjectID"] = this.getCurrentSubject();
        }
      } else {
        eventData["errorCode"] = "GCP02";
        eventData["errorDescription"] = "bad parameter passed to logEvent in Geordi Client";
        eventData["type"] = "error";
      }
      return this.addUserDetailsToEventData(eventData).always((function(_this) {
        return function(eventData) {
          if (eventData["userID"] == null) {
            eventData["userID"] = _this.UserStringGetter.ANONYMOUS;
          }
          if ((_this.experimentServerClient == null) || _this.experimentServerClient.ACTIVE_EXPERIMENT === null || _this.UserStringGetter.currentUserID === _this.UserStringGetter.ANONYMOUS || (_this.experimentServerClient.currentCohort != null) || _this.experimentServerClient.experimentCompleted) {
            _this.logToGeordi(eventData);
            return _this.logToGoogle(eventData);
          } else {
            if (!_this.gettingCohort) {
              _this.gettingCohort = true;
              return _this.addCohortToEventData(eventData).always(function(eventData) {
                _this.logToGeordi(eventData);
                _this.logToGoogle(eventData);
                return _this.gettingCohort = false;
              });
            } else {
              _this.logToGeordi(eventData);
              return _this.logToGoogle(eventData);
            }
          }
        };
      })(this));
    };

    return GeordiClient;

  })();

}).call(this);
